{"mappings":"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","sources":["XP/Maze-Generator/Game.js"],"sourcesContent":["let maze = document.querySelector(\".maze\")\nlet ctx = maze.getContext(\"2d\")\nlet current;\n\nclass Maze {\n    constructor(size, rows, columns){\n        this.size = size;\n        this.rows = rows;\n        this.columns = columns;\n        this.grid = [];\n        this.stack = []; \n    }\n    setup(){\n        for(let r = 0; r < this.rows; r++){\n            let row = [];\n            for(let c = 0; c < this.columns; c++){\n                let cell = new Cell(r, c, this.grid, this.size);\n                row.push(cell);\n            }\n            this.grid.push(row)\n        }\n        current = this.grid[0][0];\n    }\n\n    draw(){\n        maze.width = this.size;\n        maze.hight = this.size;\n        maze.style.background = 'black'\n        current.visited = true\n\n        for (let r = 0; r < this.rows; r++){\n            for (let c = 0; c < this.columns; c++){\n                let grid = this.grid;\n                grid[r][c].show(this.size, this.rows, this.columns)\n            }\n        }\n    }\n\n} \n\nclass Cell{\n    constructor(rowNum, colNum, parentGrid, parentSize){\n        this.rowNum = rowNum;\n        this.colNum = colNum;\n        this.parentGrid = parentGrid;\n        this.parentSize = parentSize;\n        this.visited = false\n        this.walls = {\n            topWall:true,\n            rightWall:true,\n            bottomWall: true,\n            leftWall: true,\n        };\n    }\n    drawTopWall(x, y, size, columns, rows) {\n        ctx.beginPath()\n        ctx.moveTo(x, y);\n        ctx.lineTo(x+size/columns, y) \n        ctx.stroke();\n    }\n\n    drawRightWall(x, y, size, columns, rows) {\n        ctx.beginPath()\n        ctx.moveTo(x + size / columns, y);\n        ctx.lineTo(x + size / columns, y + size / rows) \n        ctx.stroke();\n    }\n\n    drawBottomWall(x, y, size, columns, rows) {\n        ctx.beginPath()\n        ctx.moveTo(x, y + size/rows);\n        ctx.lineTo(x + size / columns, y + size / rows) \n        ctx.stroke();\n    }\n    drawLeftWall(x, y, size, columns, rows) {\n        ctx.beginPath()\n        ctx.moveTo(x, y);\n        ctx.lineTo(x, y + size / rows) \n        ctx.stroke();\n    }\n\n    show(size, rows, columns){\n        let x = (this.colNum * size) / columns;\n        let y = (this.rowNum * size) / rows;\n        ctx.strokeStyle = 'white';\n        ctx.fillStyle = 'black';\n        ctx.lineWidith = 2;\n\n        if (this.walls.topWall) this.drawTopWall(x, y, size, columns, rows);\n        if (this.walls.rightWall) this.drawRightWall(x, y, size, columns, rows);\n        if (this.walls.bottomWall) this.drawBottomWall(x, y, size, columns, rows);\n        if (this.walls.leftWall) this.drawLeftWall(x, y, size, columns, rows);\n        if (this.visited) {\n            ctx.fillRect(x+1, y+1, size/columns - 2, size/rows - 2);\n        }\n\n    }\n}\nlet newMaze = new Maze(500, 10, 10);\nnewMaze.setup();\nnewMaze.draw();"],"names":[],"version":3,"file":"index.89087c94.js.map","sourceRoot":"/__parcel_source_root/"}